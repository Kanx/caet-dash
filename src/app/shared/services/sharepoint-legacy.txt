
// Sharepoint returns FormDigestValue as part of an XML document, so we need to use Http as opposed to HttpClient (which defaults to JSON)
// private getRequestDigest(): Observable<any> {
//   const requestDigestHeaders = new Headers();
// requestDigestHeaders.append('Accept', 'text/xml;charset=utf-8');
//
// const requestOptions = new RequestOptions({ headers: requestDigestHeaders});
// return this._http.post(`${this.api}/contextinfo`, { }, requestOptions);
// }
// createListItem(listName: string, data: object): Promise<any> {
//   return new Promise((resolve) => {
//     this.getRequestDigest()
//         .map(requestDigest => requestDigest.text())
//         .subscribe(requestDigest => {
//           const FormDigestValue = JSON.parse(convert.xml2json(requestDigest)).elements[0].elements[1].elements[0].text;
//           const payload = JSON.stringify(Object.assign(data, { __metadata: { 'type': `SP.Data.${listName}ListItem` }}));
//
//           return this.http.post(`${this.api}/web/lists/getByTitle('${listName}')/items`,
//             payload,
//             { 'headers': this.headers.set('X-RequestDigest', FormDigestValue) })
//             .subscribe(resolve);
//         });
//   });
// }
//
// updateListItem(listName: string, listItemId: number, data: object): Promise<any> {
//   return new Promise((resolve) => {
//     this.getRequestDigest()
//         .map(requestDigest => requestDigest.text())
//         .subscribe(requestDigest => {
//           const FormDigestValue = JSON.parse(convert.xml2json(requestDigest)).elements[0].elements[1].elements[0].text;
//           this.http.put(`${this.api}/web/lists/getByTitle('${listName}')/items(${listItemId})`,
//             JSON.stringify(Object.assign(data, { __metadata: { 'type': 'SP.List' }})),
//             { 'headers': this.headers.set('X-RequestDigest', FormDigestValue) })
//             .subscribe(resolve);
//         });
//   });
// }
//
// deleteListItem(listName: string, listItemId: number): Promise<any> {
//   return new Promise((resolve) => {
//     this.getRequestDigest()
//         .map(requestDigest => requestDigest.text())
//         .subscribe(requestDigest => {
//           const FormDigestValue = JSON.parse(convert.xml2json(requestDigest)).elements[0].elements[1].elements[0].text;
//
//           this.http.delete(`${this.api}/web/lists/getByTitle('${listName}')/items(${listItemId})`,
//             { 'headers': this.headers.set('X-RequestDigest', FormDigestValue) })
//             .subscribe(resolve);
//         });
//   });
// }
